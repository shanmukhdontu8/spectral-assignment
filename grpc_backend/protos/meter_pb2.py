# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/meter.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12protos/meter.proto\x12\x05meter\"Z\n\x0cMeterRequest\x12\x17\n\nstart_time\x18\x01 \x01(\x03H\x00\x88\x01\x01\x12\x15\n\x08\x65nd_time\x18\x02 \x01(\x03H\x01\x88\x01\x01\x42\r\n\x0b_start_timeB\x0b\n\t_end_time\"3\n\x0cMeterReading\x12\x0c\n\x04time\x18\x01 \x01(\x03\x12\x15\n\rmeter_reading\x18\x02 \x01(\x02\x32\x42\n\x05Meter\x12\x39\n\tReadMeter\x12\x13.meter.MeterRequest\x1a\x13.meter.MeterReading\"\x00\x30\x01\x62\x06proto3')



_METERREQUEST = DESCRIPTOR.message_types_by_name['MeterRequest']
_METERREADING = DESCRIPTOR.message_types_by_name['MeterReading']
MeterRequest = _reflection.GeneratedProtocolMessageType('MeterRequest', (_message.Message,), {
  'DESCRIPTOR' : _METERREQUEST,
  '__module__' : 'protos.meter_pb2'
  # @@protoc_insertion_point(class_scope:meter.MeterRequest)
  })
_sym_db.RegisterMessage(MeterRequest)

MeterReading = _reflection.GeneratedProtocolMessageType('MeterReading', (_message.Message,), {
  'DESCRIPTOR' : _METERREADING,
  '__module__' : 'protos.meter_pb2'
  # @@protoc_insertion_point(class_scope:meter.MeterReading)
  })
_sym_db.RegisterMessage(MeterReading)

_METER = DESCRIPTOR.services_by_name['Meter']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _METERREQUEST._serialized_start=29
  _METERREQUEST._serialized_end=119
  _METERREADING._serialized_start=121
  _METERREADING._serialized_end=172
  _METER._serialized_start=174
  _METER._serialized_end=240
# @@protoc_insertion_point(module_scope)
